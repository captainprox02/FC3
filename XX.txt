1. Độ phức tạp của tìm kiếm nhị phân: 
	Ο(log n)
2. ??
3. Để có thể thực hiện tìm kiếm trên dãy A, dãy A phải thỏa mãn 
	D. Dãy phải được sắp xếp tăng / giảm
4.Cho biết độ phức tạp của đoạn lệnh sau i=1; while(i<=n){k++, i*=2}
	Ο(log n)
5. Độ phwucs  tạp tốt nhất của dãy con liên tiếp lớn nhất là: 
	O(n)
6. Điểm nào sau đây khum thuộc về phương pháp vét cạn:
	Chia bài toán lớn thành các bài toán con
7.Phương pháp quay lui giải bài toán theo cách:
	Tìm lời giải theo chiều sâu
8.Trong bài toán 8 quân hậu , sau khi đã đặt quân hậu ở hàng thứ 1 thì số khả năng đặt quân hậu ở hằng 2 ít nhất bao nhiêu?
	6
9.Trong bài toán 8 quân hậu, sau khi đã đặt quân hậu ở hàng thứ nhất và đặt một quân hậuởhàng thứ2thì số khả năng có thể đặt quân hậu ở
hàng thứ 3 ít nhất là bao nhiêu:
	4
10.Theo phương pháp chia để trị,số phép nhân cần thiết khi tính x^25 là bao nhiêu?
	6
11. Theo thuật toán nhân Ấn Độ,khi nhân 13 với 17,sau lần lặp thứ2,giá trị biến S bằng bao nhiêu?
S=0;
while b>0 { 
	nếu b lẻ thì 
		S=S+ a;
		b=b/2;
	if(b>0)
		 a=a+a; 
}
return S;

s	a	b
0	 13	 17
13	26	8
13	

12.Trong bài toán máy bay trực thăng đi tuần,giả sử có các bình xăng có giá trị lần lượt là (3,5,1,4) và khoảng k=2 thì có bao nhiêu cách để bố trí các
bình xăng để đi tuần.
	3
13. Điểm giống nhau giữa phương pháp chia để trị và phương pháp quy hoạch động là:
	Chia bài toán thành các bài toán con
14.Trong bài toán con chuột di chuyển trong mê cung để đi về đích,mộtôđược gọi là an toàn khi thoả bao nhiêu điều kiện:
 if (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1) 
 	5
15. Trong bài toán sudoku,khi điền một số vào trong mộtôthì cần phải kiểm tra bao nhiêu điều kiện:
	3
16.Thuật toán nào dưới đây có thể cho ra kết quả sai?
	Tham lam
	Xác suất
17.Theo phương pháp tham lam,số lần đọc file là bao nhiêu khi ta ghép5file có kích lần lượt là(13,10,4,8.3}lại thành một file.
3 4 	7
7 8 	15
10 13	23
15 23	38

	83
18.Có thể phân thuật toán xác xuất thành bao nhiêu nhóm?
	2
19.Trong định nghĩa đệ quy bài toán con kiến,nếu gọiC(5,4)thì số lần trung gian cần phải gọi(tính)C(3.3)là:
	2
20.Độ phức tạp khi tính chuỗi con đối xứng dài nhất theo phương pháp qui hoạch động là:
	O(n^3)

TIENTU = GTP
TRUNG TU = TGP
HAU TU T P G

tiền tự, trung tự, hậu tự thứ tự lệnh in lần lượt là 1,2,3

1.Khi chèn các giá trị8,4,10,12,5,9,3 vào cây BST,nếu duyệt theo
chiều rộng ta sẽ được kết quả là:
	8 4 10 3 5 9 12
2.Giá trị nhỏ nhất trong cây BST sẽở bên ____ nhất.
	trái
3.Số phép quay khi chèn các giá trị4,10,7,8,22,9 vào cây AVL là
	2
4.Phép quay đầu tiên khi chèn các giá trị4,10,7,8,22,9vào cây AVL là:
	qRL
5.Phép quay cuối cùng khi chèn các giá trị4,10,7,8,22,9vào cây AVL là:
	qRL
6.Khi chèn các giá trị 4, 10, 7 , 8 , 33, 9, 2 vào cây AVL và duyệt theo chiều rộng, ta được dãy kết quả là:
	8 4 10 2 7 9 13
7.Khi tính X^13 theo phương pháp chia để trị. số phép nhân cần dùng là:
	5
8. Khi tính X^100 theo phương pháp chia để trị. số phép nhân cần dùng là:
	8
9.Nếu chèn các giá trị 3, 12, 4, 9, 10 vào bản băm có kích thước 7, số ô trong bản băm không chưa phần tử nào
	3
10.Nếu chèn các giá trị 3, 12, 4, 9, 10 vào bản băm có kích thước 7, xử lí đụng độ bằng phương pháp chaining list thì giá trị ô[3] trong bảng băm sẽ là
	3 10
11.Trong bài toán chia bi vào hộp, khi tính C(m, n), nếu n > m thì giá trị tại ô C(m, n) sẽ bằng ô 
	C(m, m)
12. Trong bài toán con kiến nếu n =2 và m = 4 thì ta được giá trị là:
	15
13.Trong bài toán người du lịch, nếu số thành phố là 6 thì số trường hợp phải thử (phương pháp vét cạn) để tìm lời giải là
	120
14. Để con trỏ p, đang trỏ đầu danh sách (khác rỗng), trỏ đêbs nốt cuối cùng của danh sách thì điều kiện còn thiếu trong vòng lặp while dưới đây là"
	p->next != NULL
15.Trong bài toán chuỗi con đối xứng dài nhất, nếu chuỗi cần tìm là LÂC, giá trị tại ô (2,4) là
L(i,j)=2+L(i+1,j-1)nếuS[i]=S[j]
L(i,j)=max(L(i+1,j),L(i,j-1))nếuS[i]<S[j]
	3
16.Trong bài toán chuỗi con đối xứng dài nhất, nếu chuỗi cần tìm là LÂC, giá trị tại ô (4,3) là
	0
17.Khi trộn 7 file có kích thước lần lượt là: 8, 7, 11, 5, 3, 12, 4 theo phương pháp tham lam số lần đọc file là
	134
18.Trog bài toán josephus, với n= 9 và k = 2 thì phần tử còn sót lại là
	3
19.File băn bản chứa 280 chữ A, 80 chữ B, 20 chữ C, 370 chữ D, 290 chữ E. Nếu nén file theo thuật toán nén Huffman thì chuỗi bit biễu diễn chữ D là
	11
20.File băn bản chứa 280 chữ A, 80 chữ B, 20 chữ C, 370 chữ D, 290 chữ E. Nếu nén file theo thuật toán nén Huffman thì chuỗi bit biễu diễn chuỗi ACE là
	0100010
21.Số thao tác làm thay đổi nội dung ngăn xếp là: 
	4
22.Số thao tác làm thay đổi nội dung hàng đợi là: 
	4
23. Trong thao tác duyệt hậu tự. lệnh in giá trị sẽ nằm ở thứ tự (1,2,3)
	3
24.Khi them một phần tửu x vào ngăn xếp, phần tử x sẽ ở vị trí ___ của ngăn xếp
	top
25.Tìm kiếm trên danh sách liên kết có độ phức tạp là
	(On)
26.Nếu mảng a đã sắ xếp tăng dần, ta có thể dùng phương pháp tìm kiếm ___ để tìm kiếm nhị phân
	nhị phân
27.Thuật toán tốt nhất để tìm dãy con liên tiếp có tổng lớn nhất có độ phức tạp là
	(On^3)
28.Phương pháp tham lam tìm giải bài toán người du lịch có độ phức tạp là
 	O(n^2)


O(1)

// Here c is a constant   
   for (int i = 1; i <= c; i++) {  
        // some O(1) expressions
   }
O(n)

// Here c is a positive integer constant   
   for (int i = 1; i <= n; i += c) {  
        // some O(1) expressions
   }

   for (int i = n; i > 0; i -= c) {
        // some O(1) expressions
   }

O(n^c)

for (int i = 1; i <=n; i += c) {
       for (int j = 1; j <=n; j += c) {
          // some O(1) expressions
       }
   }

   for (int i = n; i > 0; i -= c) {
       for (int j = i+1; j <=n; j += c) {
          // some O(1) expressions
   }


O(Logn)

   for (int i = 1; i <=n; i *= c) {
       // some O(1) expressions
   }
   for (int i = n; i > 0; i /= c) {
       // some O(1) expressions
   }

tim kiem nhi phan

boolean bsearch(int x)
{
    int L = 0, R = a.length - 1;
    while (L <= R)
    {
        int m = (L + R) / 2;
        if (a[m] == x)
        {
            System.out.println(" vi tri =" + m);
            return true;
        }
        else if (a[m] > x)
            R = m - 1;
        else
            L = m + 1;
    }
    return false;
}

Vét cạn

Brute force is a straightforward approach to solving a problem,
usually directly based on the problem statement and definitions of the
concepts involved.
The “force” implied by the strategy’s definition is that of a computer and
not that of one’s intellect.
The brute-force strategy is indeed the one that is easiest to apply.


- Giải bài toán bằng cách liệt kê tất cả các trường
hợp là ứng viên của lời giải.
- Kiểm tra từng ứng viên để chọn ra lời giải.
Ưu điểm: Đơn giản, dễ chứng minh tính đúng đắn
Hạn chế: Không có chiến lược nào trong quá trình
tìm lời giải.
Khi kích thước dữ liệu lớn thì thời gian giải rất lâu, do xét tất cả ứng viên

Phương pháp quay lui (Back Tracking)

Backtracking is an algorithmic-technique for solving problems
recursively by trying to build a solution incrementally, one
piece at a time, removing those solutions that fail to satisfy
the constraints of the problem at any point of time (by time,
here, is referred to the time elapsed till reaching any level of
the search tree)

There are three types of problems in backtracking
• Decision Problem – In this, we search for a feasible solution. 
• Optimization Problem – In this, we search for the best
solution. 
• Enumeration Problem 

Tư tưởng của phương pháp là thử từng khả năng
cho đến khi tìm thấy lời giải đúng.
Đó là một quá trình tìm kiếm theo độ sâu trong một tập hợp các lời giải.

Sudoku

bool isSafe(int grid[9][9], int row, int col, int num)
{
    return !UsedInRow(grid, row, num) &&
           !UsedInCol(grid, col, num) &&
           !UsedInBox(grid, row - row % 3, col - col % 3, num) &&
           grid[row][col] == 0;
}

bool SolveSudoku(int grid[9][9])
{
    int row, col;
    if (!EmptyCell(grid, row, col))
        return true;
    for (int num = 1; num <= 9; num++)
        if (isSafe(grid, row, col, num))
        { // số num có thể đặt vào ô r,c
            grid[row][col] = num;
            if (SolveSudoku(grid))
                return true; // đã điền hết thì trả về true
            grid[row][col] = 0;
        }
    return false;
}

bool EmptyCell(int grid[9][9], int &row, int &col)
{
    for (row = 0; row < 9; row++)
        for (col = 0; col < 9; col++)
            if (grid[row][col] == 0)
                return true;
    return false;
}

bool UsedInRow(int grid[9][9], int row, int num)
{
    for (int col = 0; col < 9; col++)
        if (grid[row][col] == num)
            return true;
    return false;
}
bool UsedInCol(int grid[9][9], int col, int num)
{
    for (int row = 0; row < 9; row++)
        if (grid[row][col] == num)
            return true;
    return false;
}

#include <bits/stdc++.h>
using namespace std;
void printGrid(int grid[9][9])
{
    for (int row = 0; row < 9; row++)
    {
        for (int col = 0; col < 9; col++)
            cout << grid[row][col] << " ";
        cout << endl;
    }
}

 Rat in a Maze

bool isSafe(int maze[N][N], int x, int y)
{
    // nếu vị trí đứng là trong bảng và ô chứa số 1
    if (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1)
        return true;
    return false;
}

bool solveMazeUtil(int maze[N][N], int x, int y, int sol[N][N])
{
    if (x == N - 1 && y == N - 1)
    {
        sol[x][y] = 1;
        return true;
    } // đã đến đích
    if (isSafe(maze, x, y) == true)
    { // nếu ô đang đứng là an toàn
        sol[x][y] = 1;
        if (solveMazeUtil(maze, x + 1, y, sol) == true)
            return true; // di chuyển ngang
        if (solveMazeUtil(maze, x, y + 1, sol) == true)
            return true; // di chuyển xuống
        sol[x][y] = 0;
        return false; // quay lui
    }
    return false; // trường hợp không có lời giải
}

#define N 4
int sol[4][4];
bool solveMaze(int maze[N][N]) {}
int main()
{
    int maze[N][N] = {{1, 0, 0, 0},
                      {1, 1, 0, 1},
                      {0, 1, 0, 0},
                      {1, 1, 1, 1}};
    solveMaze(maze);
    return 0;
}

Phương pháp chia để trị (divide and conquer)

-  Chia bài toán lớn thành các bài toán con
- Giải các bài toán con
- Kết hợp lời giải các bài toán con để có lời giải bài toán lớn

Divide and conquer is an algorithm design paradigm based on multi-branched recursion.
A divide-and-conquer algorithm works by recursively breaking down a problem into two
or more sub-problems of the same or related type, until these become simple enough
to be solved directly.
The solutions to the sub-problems are then combined to give a solution to the original problem

There are mainly three steps in a divide and conquer algorithm
Divide — The problem is broken down or divided into a number of
subproblems that are smaller instances of the same problem.
Conquer — The subproblems are solved recursively. If the subproblem
sizes are small enough , however, just solve them in a straightforward
manner.
Combine — The solution to the subproblems are combined to get the solution for the main problem

Solving difficult problems
Divide and conquer is a powerful tool for solving conceptually difficult
problems: all it requires is a way of breaking the problem into sub-problems,
of solving the trivial cases and of combining sub-problems to the original
problem

The divide-and-conquer paradigm often helps in the discovery of efficient algorithms. It was the key, for example, to Karatsuba's fast multiplication method, the quicksort and mergesort algorithms, the Strassen algorithm for matrix multiplication, and fast Fourier transforms.

Divide-and-conquer algorithms are naturally adapted for execution in multi-processor machines, especially shared-memory systems where the
communication of data between processors does not need to be planned in
advance, because distinct sub-problems can be executed on different processor

Phương pháp qui hoạch động (dynamic programming) 4 bước

Giải bài toán bằng cách chia bài toán lớn thành các bài toán nhỏ
Giải các bài toán nhỏ và ghi nhớ kết quả.
Khi gặp một bài toán nhỏ đã giải thì dùng lại kết quả, không giải
lại từ đầu.
Qui hoạch động thường được dùng khi có các bài toán con trùng nhau


Chia bi

long long chia_bi(int m, int n)
{
if(m>0 && n==0) return 0;
else if(m==0) return 1;
else if (m<n) return chia_bi(m,m);
else return chia_bi(m,n-1) + chia_bi(m-n,n);
}

int main()
{
int m=12, n=10, t1,t2; // m=60, n=46;
t1=clock(); long long kq=chia_bi(m,n); t2=clock();
cout<<"\n So cach chia "<<m<<" vien bi vao "<<n<<" hop la: "<<kq;
cout<<"\n thoi gian tinh toan la = "<<(t2-t1);
}

Phương pháp tham lam

Thuật toán xác suất: probabilistic algorithm
A heuristic algorithm is one that is
designed to solve a problem in a
faster and more efficient fashion than
traditional methods by sacrificing
optimality, accuracy, precision, or  designed to solve a problem in a
faster and more efficient fashion than
traditional methods by sacrificing
optimality, accuracy, precision, or
completeness for speed.

Heuristic algorithms often times used to solve NP-complete
problems, a class of decision problems. In these problems, there is no
known efficient way to find a solution quickly and accurately
although solutions can be verified when given.

Heuristics can produce a solution individually or be used to provide a
good baseline and are supplemented with optimization algorithms.

Heuristic algorithms are most often employed when approximate
solutions are sufficient and exact solutions are necessarily
computationally expensive.